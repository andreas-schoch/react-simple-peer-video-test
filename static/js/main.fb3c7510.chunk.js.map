{"version":3,"sources":["components/VideoPeerJS/VideoPeerJS.module.scss","components/VideoVanillaWebRTC/VideoVanillaWebRTC.module.scss","components/VideoSimplePeer/VideoSimplePeer.module.scss","../node_modules/peerjs/dist sync","components/VideoSimplePeer/VideoSimplePeer.js","components/VideoPeerJS/VideoPeerJS.js","components/VideoVanillaWebRTC/VideoVanillaWebRTC.js","components/App/App.js","index.js"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","VideoSimplePeer","video","useRef","remoteVideo","useState","peer","setPeer","stream","setStream","remoteStream","setRemoteStream","initiator","setInitiator","username","connectData","message","inputState","setInputState","useEffect","current","srcObject","oncanplay","play","muted","console","log","on","err","error","data","type","JSON","stringify","alert","parsedData","parse","author","text","remoteMediaStream","handleChange","target","name","value","className","styles","wrapper","left","ref","right","onClick","a","async","navigator","mediaDevices","getUserMedia","audio","mediaStream","startStream","Peer","trickle","onSubmit","preventDefault","signal","form","connectForm","join","onChange","placeholder","send","sendMessage","sendMessageForm","aria-label","VideoPeerJS","connection","setConnection","call","setCall","conn","remoteCall","answer","debug","config","iceServers","url","connect","destinationPeerId","iceCandidates","VideoVanillaWebRTC","descriptionRef","iceCandidatesRef","localVideo","localStream","setLocalStream","peerConnection","setPeerConnection","description","remoteIceCandidates","addStream","addEventListener","evt","iceCandidate","candidate","RTCIceCandidate","push","createOffer","offerToReceiveVideo","then","setLocalDescription","RTCPeerConnection","urls","RTCSessionDescription","setRemoteDescription","createAnswer","forEach","addIceCandidate","descriptionLabel","descriptionTextarea","disabled","iceCandidatesLabel","iceCandidatesTextarea","App","to","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fb3c7510.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"VideoPeerJS_wrapper__3u3HX\",\"left\":\"VideoPeerJS_left__hnH5B\",\"video\":\"VideoPeerJS_video__r8XjV\",\"right\":\"VideoPeerJS_right__2-PzP\",\"form\":\"VideoPeerJS_form__22L_T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"VideoVanillaWebRTC_wrapper__1kCWV\",\"left\":\"VideoVanillaWebRTC_left__1CdJA\",\"video\":\"VideoVanillaWebRTC_video__2JcOX\",\"right\":\"VideoVanillaWebRTC_right__1B0SI\",\"form\":\"VideoVanillaWebRTC_form__38NYA\",\"description\":\"VideoVanillaWebRTC_description__tbcsR\",\"descriptionLabel\":\"VideoVanillaWebRTC_descriptionLabel__3d1md\",\"descriptionTextarea\":\"VideoVanillaWebRTC_descriptionTextarea__3t_tp\",\"iceCandidates\":\"VideoVanillaWebRTC_iceCandidates__22Kuj\",\"iceCandidatesLabel\":\"VideoVanillaWebRTC_iceCandidatesLabel__3-lB8\",\"iceCandidatesTextarea\":\"VideoVanillaWebRTC_iceCandidatesTextarea__26tsd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"VideoSimplePeer_wrapper__1POsX\",\"left\":\"VideoSimplePeer_left__1Xu1L\",\"video\":\"VideoSimplePeer_video__2iJoo\",\"right\":\"VideoSimplePeer_right__18nVu\",\"form\":\"VideoSimplePeer_form__KoPlx\"};","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 80;","import React, { useState, useEffect, useRef } from 'react';\r\nimport styles from './VideoSimplePeer.module.scss';\r\nimport Peer from 'simple-peer';\r\n\r\nconst VideoSimplePeer = () => {\r\n    //////////////////////\r\n    //// STATE & REFS ////\r\n    //////////////////////\r\n    const video = useRef(null);\r\n    const remoteVideo = useRef(null);\r\n\r\n    const [peer, setPeer] = useState(null);\r\n    const [stream, setStream] = useState(null);\r\n    const [remoteStream, setRemoteStream] = useState(null);\r\n    const [initiator, setInitiator] = useState(false);\r\n    const [username] = useState(initiator ? 'PEER 1' : 'PEER 2');\r\n    // const [messages] = useState([]);\r\n    const [inputState, setInputState] = useState({\r\n        connectData: '',\r\n        message: ''\r\n    });\r\n\r\n    /////////////////\r\n    //// EFFECTS ////\r\n    /////////////////\r\n    // set src of <video> to own stream when available\r\n    useEffect(() => {\r\n        if (video.current && stream) {\r\n            video.current.srcObject = stream;\r\n            video.current.oncanplay = () => {\r\n                video.current.play();\r\n                video.current.muted = true; // set to false to hear/test your own audio\r\n            };\r\n        }\r\n    }, [stream]);\r\n\r\n    // set src of <video> to remote stream when available\r\n    useEffect(() => {\r\n        if (remoteVideo.current && remoteStream) {\r\n            remoteVideo.current.srcObject = remoteStream;\r\n            remoteVideo.current.oncanplay = () => {\r\n                remoteVideo.current.play();\r\n                remoteVideo.current.muted = false; // set to false to hear/test remote audio\r\n            };\r\n        }\r\n    }, [remoteStream]);\r\n\r\n    useEffect(() => {\r\n        console.log('Peer', peer);\r\n        if (peer) {\r\n            peer.on('error', err => console.error('error', err));\r\n\r\n            peer.on('signal', data => {\r\n                if (data.type === 'offer' || data.type === 'answer') {\r\n                    console.log(`%c ${JSON.stringify(data)}`, 'background: #222; color: #bada55');\r\n                    alert(\r\n                        'open console and copy the console.log with the black background. Give it to the other peer to connect'\r\n                    );\r\n                }\r\n            });\r\n\r\n            peer.on('connect', () => {\r\n                console.log('CONNECT');\r\n            });\r\n\r\n            peer.on('data', data => {\r\n                const parsedData = JSON.parse(data);\r\n                console.log('parsed', parsedData);\r\n\r\n                if (parsedData.message) {\r\n                    console.log(\r\n                        `%c MESSAGE - ${parsedData.message.author}: \"${parsedData.message.text}\"`,\r\n                        'background: black; color: white; padding: 1rem'\r\n                    );\r\n                }\r\n            });\r\n\r\n            peer.on('stream', remoteMediaStream => {\r\n                setRemoteStream(remoteMediaStream);\r\n            });\r\n        }\r\n    }, [peer]);\r\n\r\n    /////////////////\r\n    //// METHODS ////\r\n    /////////////////\r\n    const initPeer = () => {\r\n        // trickle false prevents the lookout for \"ICE candidates\" (Candidates are best ways to connect to peers or something like that)\r\n        setPeer(new Peer({ initiator: initiator, trickle: false, stream: stream }));\r\n    };\r\n\r\n    const startStream = async () => {\r\n        try {\r\n            let mediaStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n            setStream(mediaStream);\r\n        } catch (error) {\r\n            console.error('stream couldnt be started via \"startStream()\"', error);\r\n        }\r\n    };\r\n\r\n    const connect = () => {\r\n        peer.signal(JSON.parse(inputState.connectData));\r\n    };\r\n\r\n    const sendMessage = () => {\r\n        if (peer) {\r\n            const message = { author: username, text: inputState.message };\r\n            peer.send(JSON.stringify({ message }));\r\n        }\r\n    };\r\n\r\n    //////////////////\r\n    //// HANDLERS ////\r\n    //////////////////\r\n    const handleChange = e => setInputState({ ...inputState, [e.target.name]: e.target.value });\r\n    const handleStartStream = e => startStream();\r\n    const handleInitPeer = e => initPeer();\r\n\r\n    const handleSendMessage = e => {\r\n        e.preventDefault();\r\n        console.log('sending message');\r\n        sendMessage();\r\n    };\r\n\r\n    const handleConnect = e => {\r\n        e.preventDefault();\r\n        connect();\r\n    };\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.left}>\r\n                <h2>My Stream</h2>\r\n                {/* will play a livestream of your own webcam whenever available */}\r\n                <video ref={video} className={styles.video} />\r\n\r\n                <h2>Remote Stream</h2>\r\n                {/* will play a livestream of the remote webcam whenever connection is established stream and available */}\r\n                <video ref={remoteVideo} className={styles.video} />\r\n            </div>\r\n\r\n            <div className={styles.right}>\r\n                <button onClick={() => setInitiator(!initiator)}>\r\n                    {initiator ? 'Change to receiving Peer' : 'Change to Initializing Peer'}\r\n                </button>\r\n\r\n                {/* click to start a livestream of your own webcam */}\r\n                <button onClick={handleStartStream}>Start My Stream</button>\r\n\r\n                {/* click to initialize this user as a peer */}\r\n                <button onClick={handleInitPeer}>{`Init This Peer ${initiator ? '(Generates Offer)' : ''}`}</button>\r\n\r\n                <form onSubmit={handleConnect} className={[styles.form, styles.connectForm].join(' ')}>\r\n                    <fieldset>\r\n                        <legend>Connect</legend>\r\n                        <textarea\r\n                            name='connectData'\r\n                            id='connectData'\r\n                            onChange={handleChange}\r\n                            value={inputState.connectData}\r\n                            placeholder={`${initiator ? 'Enter Answer' : 'Enter Offer'} of other Peer`}\r\n                        />\r\n\r\n                        <button type='submit'>connect {!initiator ? '(Generates Answer)' : ''}</button>\r\n                    </fieldset>\r\n                </form>\r\n\r\n                <form onSubmit={handleSendMessage} className={[styles.form, styles.sendMessageForm].join(' ')}>\r\n                    <fieldset>\r\n                        <legend>Send Message to Peer</legend>\r\n                        <input\r\n                            type='text'\r\n                            aria-label='chat input'\r\n                            name='message'\r\n                            value={inputState.message}\r\n                            onChange={handleChange}\r\n                            placeholder='Hello Peer...'\r\n                        />\r\n                        <button type='submit'>send</button>\r\n                    </fieldset>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VideoSimplePeer;\r\n\r\n/*\r\nTHINGS TO LEARN ABOUT\r\n- NAT (NAT = Network Address Translation)\r\n- STUN SERVER ( STUN = Session Traversal of UDP Through NATs ) (also STUN = Session Traversal Utilities for NAT )\r\n- TURN SERVER ( TURN = Traversal Using Relay NAT )\r\n- SIGNALING\r\n- ICE CANDIDATES (ICE = Interactive Connectivity Establishment)\r\n-\r\n\r\n\r\n\r\n*/\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport styles from './VideoPeerJS.module.scss';\r\nimport Peer from 'peerjs';\r\n\r\nconst VideoPeerJS = () => {\r\n    //////////////////////\r\n    //// STATE & REFS ////\r\n    //////////////////////\r\n    const video = useRef(null);\r\n    const remoteVideo = useRef(null);\r\n\r\n    const [peer, setPeer] = useState(null);\r\n    const [connection, setConnection] = useState(null);\r\n    const [call, setCall] = useState(null);\r\n\r\n    const [stream, setStream] = useState(null);\r\n    const [remoteStream, setRemoteStream] = useState(null);\r\n    // const [initiator] = useState(window.location.hash === '#init');\r\n    // const [username] = useState(initiator ? 'PEER 1' : 'PEER 2');\r\n    // const [messages] = useState([]);\r\n    const [inputState, setInputState] = useState({\r\n        connectData: '',\r\n        message: ''\r\n    });\r\n\r\n    /////////////////\r\n    //// EFFECTS ////\r\n    /////////////////\r\n    // set src of <video> to own stream when available\r\n    useEffect(() => {\r\n        if (video.current && stream) {\r\n            video.current.srcObject = stream;\r\n            video.current.oncanplay = () => {\r\n                video.current.play();\r\n                video.current.muted = true; // set to false to hear/test your own audio\r\n            };\r\n        }\r\n    }, [stream]);\r\n\r\n    // set src of <video> to remote stream when available\r\n    useEffect(() => {\r\n        if (remoteVideo.current && remoteStream) {\r\n            remoteVideo.current.srcObject = remoteStream;\r\n            remoteVideo.current.oncanplay = () => {\r\n                remoteVideo.current.play();\r\n                remoteVideo.current.muted = false; // set to false to hear/test remote audio\r\n            };\r\n        }\r\n    }, [remoteStream]);\r\n\r\n    // init event listeners for peer when peer is available\r\n    useEffect(() => {\r\n        if (peer) {\r\n            peer.on('open', id => {\r\n                console.log('My peer ID is: ' + id);\r\n                console.log('PEERr', peer);\r\n            });\r\n\r\n            peer.on('connection', conn => {\r\n                console.log('connection', conn);\r\n                setConnection(conn);\r\n            });\r\n\r\n            peer.on('call', remoteCall => {\r\n                // Answer the call, providing our mediaStream\r\n                console.log('incoming call. Answering automatically');\r\n                setCall(remoteCall);\r\n                remoteCall.answer(stream);\r\n                // setRemoteStream(call);\r\n            });\r\n        }\r\n    }, [peer]);\r\n\r\n    // init event listeners for connection when connection is established\r\n    useEffect(() => {\r\n        if (connection) {\r\n            console.log('CONNECTION ESTABLISHED');\r\n\r\n            connection.on('open', () => {\r\n                // connection.on('data', data => {\r\n                //     console.log('RECEIVED', data);\r\n                // });\r\n\r\n                connection.on('data', data => {\r\n                    const parsedData = JSON.parse(data);\r\n                    console.log('parsed', parsedData);\r\n\r\n                    if (parsedData.message) {\r\n                        console.log(\r\n                            `%c MESSAGE - ${parsedData.message.author}: \"${parsedData.message.text}\"`,\r\n                            'background: black; color: white; padding: 1rem'\r\n                        );\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }, [connection]);\r\n\r\n    useEffect(() => {\r\n        if (call) {\r\n            call.on('stream', remoteMediaStream => {\r\n                setRemoteStream(remoteMediaStream);\r\n            });\r\n        }\r\n    }, [call]);\r\n\r\n    /////////////////\r\n    //// METHODS ////\r\n    /////////////////\r\n    const initPeer = () => {\r\n        setPeer(new Peer({ debug: true, config: { iceServers: [{ url: 'stun:stun.l.google.com:19302' }] } }));\r\n    };\r\n\r\n    const startStream = async () => {\r\n        try {\r\n            let mediaStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n            setStream(mediaStream);\r\n        } catch (error) {\r\n            console.error('stream couldnt be started via \"startStream()\"', error);\r\n        }\r\n    };\r\n\r\n    const connect = () => {\r\n        setConnection(peer.connect(inputState.connectData));\r\n    };\r\n\r\n    const sendMessage = () => {\r\n        if (peer && connection) {\r\n            const message = { author: 'derp', text: inputState.message };\r\n            connection.send(JSON.stringify({ message }));\r\n            console.log('sending message');\r\n            // connection.send('Hello!');\r\n        }\r\n    };\r\n\r\n    const startCall = destinationPeerId => {\r\n        if (peer && connection && stream) {\r\n            setCall(peer.call(destinationPeerId, stream));\r\n        }\r\n    };\r\n\r\n    //////////////////\r\n    //// HANDLERS ////\r\n    //////////////////\r\n    const handleChange = e => setInputState({ ...inputState, [e.target.name]: e.target.value });\r\n    const handleStartStream = e => startStream();\r\n    const handleInitPeer = e => initPeer();\r\n\r\n    const handleSendMessage = e => {\r\n        e.preventDefault();\r\n        // console.log('sending message');\r\n        sendMessage();\r\n    };\r\n\r\n    const handleConnect = e => {\r\n        e.preventDefault();\r\n        connect();\r\n    };\r\n\r\n    const handleStartCall = e => {\r\n        startCall(inputState.connectData);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.left}>\r\n                <h2>My Stream</h2>\r\n                {/* will play a livestream of your own webcam whenever available */}\r\n                <video ref={video} className={styles.video} />\r\n\r\n                <h2>Remote Stream</h2>\r\n                {/* will play a livestream of the remote webcam whenever connection is established stream and available */}\r\n                <video ref={remoteVideo} className={styles.video} />\r\n            </div>\r\n\r\n            <div className={styles.right}>\r\n                {/* click to start a livestream of your own webcam */}\r\n                <button onClick={handleStartStream}>Start My Stream</button>\r\n\r\n                {/* click to initialize this user as a peer */}\r\n                <button onClick={handleInitPeer}>Init This Peer</button>\r\n\r\n                <form onSubmit={handleConnect} className={styles.form}>\r\n                    <fieldset>\r\n                        <legend>Connect</legend>\r\n                        <input\r\n                            type='text'\r\n                            name='connectData'\r\n                            id='connectData'\r\n                            onChange={handleChange}\r\n                            value={inputState.connectData}\r\n                            placeholder='enter peer id you want to connect with'\r\n                        />\r\n\r\n                        <button type='submit'>connect</button>\r\n                    </fieldset>\r\n                </form>\r\n\r\n                <form onSubmit={handleSendMessage} className={styles.form}>\r\n                    <fieldset>\r\n                        <legend>Send Message to Peer</legend>\r\n                        <input\r\n                            type='text'\r\n                            aria-label='chat input'\r\n                            name='message'\r\n                            value={inputState.message}\r\n                            onChange={handleChange}\r\n                            placeholder='Hello Peer...'\r\n                        />\r\n                        <button type='submit'>send</button>\r\n                    </fieldset>\r\n                </form>\r\n\r\n                {/* click to start call */}\r\n                <button onClick={handleStartCall}>CALL</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VideoPeerJS;\r\n\r\n/*\r\nTHINGS TO LEARN ABOUT\r\n- NAT (NAT = Network Address Translation)\r\n- STUN SERVER ( STUN = Session Traversal of UDP Through NATs ) (also STUN = Session Traversal Utilities for NAT ) \r\n- TURN SERVER ( TURN = Traversal Using Relay NAT )\r\n- SIGNALING\r\n- ICE CANDIDATES (ICE = Interactive Connectivity Establishment)\r\n- \r\n\r\n\r\n\r\n*/\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport styles from './VideoVanillaWebRTC.module.scss';\r\nimport Peer from 'simple-peer';\r\n\r\nconst iceCandidates = [];\r\n\r\nconst VideoVanillaWebRTC = () => {\r\n    //////////////////////\r\n    //// STATE & REFS ////\r\n    //////////////////////\r\n    const descriptionRef = useRef(null); // display the offer/answer\r\n    const iceCandidatesRef = useRef(null); // display the ICE candidates as a stringified array\r\n\r\n    const localVideo = useRef(null);\r\n    const remoteVideo = useRef(null);\r\n\r\n    const [localStream, setLocalStream] = useState(null);\r\n    const [remoteStream, setRemoteStream] = useState(null);\r\n\r\n    const [peerConnection, setPeerConnection] = useState(null);\r\n    // const [localIceCandidates, setLocalIceCandidates] = useState([]);\r\n\r\n    const [initiator, setInitiator] = useState(false);\r\n    const [inputState, setInputState] = useState({\r\n        description: '',\r\n        message: '',\r\n        remoteIceCandidates: ''\r\n    });\r\n\r\n    /////////////////\r\n    //// EFFECTS ////\r\n    /////////////////\r\n    // set src of <video> to own stream when available\r\n    useEffect(() => {\r\n        if (localVideo.current && localStream) {\r\n            localVideo.current.srcObject = localStream;\r\n            localVideo.current.oncanplay = () => {\r\n                localVideo.current.play();\r\n                localVideo.current.muted = true; // set to false to hear/test your own audio\r\n            };\r\n        }\r\n    }, [localStream]);\r\n\r\n    // set src of <video> to remote stream when available\r\n    useEffect(() => {\r\n        if (remoteVideo.current && remoteStream) {\r\n            remoteVideo.current.srcObject = remoteStream;\r\n            remoteVideo.current.oncanplay = () => {\r\n                remoteVideo.current.play();\r\n                remoteVideo.current.muted = false; // set to false to hear/test remote audio\r\n            };\r\n        }\r\n    }, [remoteStream]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (peerConnection) {\r\n            console.log('useEffect - localPeerConnection was set', peerConnection);\r\n\r\n            peerConnection.addStream(localStream);\r\n            console.log('useEffect - localPeerConnection addStream(localStream)', peerConnection);\r\n\r\n            peerConnection.addEventListener('icecandidate', (evt) => {\r\n                const iceCandidate = evt.candidate;\r\n\r\n                if (iceCandidate) {\r\n                    const newIceCandidate = new RTCIceCandidate(iceCandidate);\r\n                    iceCandidates.push(iceCandidate);\r\n                    iceCandidatesRef.current.value = JSON.stringify(iceCandidates);\r\n                //     setLocalIceCandidates([...localIceCandidates, newIceCandidate]);\r\n                //     iceCandidatesRef.current.value = JSON.stringify(localIceCandidates);\r\n                //     console.log('on icecandidate', JSON.stringify(localIceCandidates));\r\n                }\r\n            });\r\n\r\n            peerConnection.addEventListener('iceconnectionstatechange', (evt) => {\r\n                console.log('on iceconnectionstatechange', evt);\r\n            });\r\n\r\n            peerConnection.addEventListener('addstream', (evt) => {\r\n                console.log('------------STREAM RECEIVED FROM OTHER PEER', evt);\r\n                setRemoteStream(evt.stream);\r\n            });\r\n\r\n            if (initiator) {\r\n                // Set up to exchange only video.\r\n                const offerOptions = {offerToReceiveVideo: 1};\r\n                peerConnection.createOffer(offerOptions).then(description => {\r\n                    peerConnection.setLocalDescription(description)\r\n                    descriptionRef.current.value = JSON.stringify(description);\r\n                });\r\n            }\r\n        }\r\n    }, [peerConnection]);\r\n\r\n    const startStream = async () => {\r\n        try {\r\n            let mediaStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n            setLocalStream(mediaStream);\r\n        } catch (error) {\r\n            console.error('stream couldnt be started via \"startStream()\"', error);\r\n        }\r\n    };\r\n\r\n    const handleChange = evt => setInputState({...inputState, [evt.target.name]: evt.target.value});\r\n\r\n    const handleCreatePeerConnection = evt => {\r\n        const servers = {iceServers: [{urls: 'stun:stun.l.google.com:19302'}]};\r\n        setPeerConnection(new RTCPeerConnection(servers));\r\n        console.log('creating localPeerConnection');\r\n    }\r\n\r\n    const handleConnect = evt => {\r\n        evt.preventDefault();\r\n\r\n        console.log('handle connect', inputState);\r\n\r\n        const description = new RTCSessionDescription(JSON.parse(inputState.description));\r\n        if (description) {\r\n            if (initiator && description.type === 'answer') {\r\n                console.log('handle connect - initiator - answer received');\r\n                peerConnection.setRemoteDescription(description);\r\n            } else if (!initiator && description.type === 'offer') {\r\n                console.log('handle connect - !initiator - offer received - now an answer should be created!');\r\n                peerConnection.setRemoteDescription(description);\r\n\r\n                peerConnection.createAnswer().then(description => {\r\n                    peerConnection.setLocalDescription(description)\r\n                    descriptionRef.current.value = JSON.stringify(description);\r\n\r\n                    // TODO signal other peer\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleAddIceCandidates = evt => {\r\n        evt.preventDefault();\r\n        const parsedCandidates = JSON.parse(inputState.remoteIceCandidates);\r\n\r\n        parsedCandidates.forEach(candidate => {\r\n            console.log('addIceCandidate of remote peer:', candidate);\r\n           peerConnection.addIceCandidate(candidate);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.left}>\r\n                <h2>My Stream</h2>\r\n                {/* will play a livestream of your own webcam whenever available */}\r\n                <video ref={localVideo} className={styles.video} />\r\n\r\n                <h2>Remote Stream</h2>\r\n                {/* will play a livestream of the remote webcam whenever connection is established stream and available */}\r\n                <video ref={remoteVideo} className={styles.video} />\r\n            </div>\r\n\r\n            <div className={styles.right}>\r\n                <button onClick={() => setInitiator(!initiator)}>\r\n                    {initiator ? 'Change to receiving Peer' : 'Change to Initializing Peer'}\r\n                </button>\r\n\r\n                {/* click to start a livestream of your own webcam */}\r\n                <button onClick={startStream}>Start My Stream</button>\r\n\r\n                {/* click to initialize this user as a peer */}\r\n                <button onClick={handleCreatePeerConnection}>{`Init This Peer ${initiator ? '(Generates Offer)' : ''}`}</button>\r\n\r\n\r\n                <form onSubmit={handleConnect} className={[styles.form, styles.connectForm].join(' ')}>\r\n                    <fieldset>\r\n                        <legend>Connect</legend>\r\n                        <textarea\r\n                            name='description'\r\n                            id='description'\r\n                            onChange={handleChange}\r\n                            value={inputState.description}\r\n                            placeholder={`${initiator ? 'Enter Answer' : 'Enter Offer'} of other Peer`}\r\n                        />\r\n\r\n                        <button type='submit'>connect {!initiator ? '(Generates Answer)' : ''}</button>\r\n                    </fieldset>\r\n                </form>\r\n\r\n                <form onSubmit={handleAddIceCandidates} className={[styles.form, styles.connectForm].join(' ')}>\r\n                    <fieldset>\r\n                        <legend>Add the ICE Candidates of other peer</legend>\r\n                        <textarea\r\n                            name='remoteIceCandidates'\r\n                            id='remoteIceCandidates'\r\n                            onChange={handleChange}\r\n                            value={inputState.remoteIceCandidates}\r\n                            placeholder='Enter the ICE Candidates of the other peer'\r\n                        />\r\n\r\n                        <button type='submit'>Add Candidates</button>\r\n                    </fieldset>\r\n                </form>\r\n\r\n                {/*<form onSubmit={handleSendMessage} className={[styles.form, styles.sendMessageForm].join(' ')}>*/}\r\n                {/*    <fieldset>*/}\r\n                {/*        <legend>Send Message to Peer</legend>*/}\r\n                {/*        <input*/}\r\n                {/*            type='text'*/}\r\n                {/*            aria-label='chat input'*/}\r\n                {/*            name='message'*/}\r\n                {/*            value={inputState.message}*/}\r\n                {/*            onChange={handleChange}*/}\r\n                {/*            placeholder='Hello Peer...'*/}\r\n                {/*        />*/}\r\n                {/*        <button type='submit'>send</button>*/}\r\n                {/*    </fieldset>*/}\r\n                {/*</form>*/}\r\n            </div>\r\n\r\n            <div className={styles.description}>\r\n                <h2 className={styles.descriptionLabel}>{initiator ? 'Offer' : 'Answer'}</h2>\r\n                <div>Once it appears, give the {initiator ? 'Offer' : 'Answer'} below to the other peer</div>\r\n                <textarea className={styles.descriptionTextarea} ref={descriptionRef} disabled/>\r\n            </div>\r\n\r\n            <div className={styles.iceCandidates}>\r\n                <h1 className={styles.iceCandidatesLabel}>Ice Candidates</h1>\r\n                <div>Once they appear give them to the other peer</div>\r\n                <textarea className={styles.iceCandidatesTextarea} ref={iceCandidatesRef} disabled/>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VideoVanillaWebRTC;\r\n\r\n/*\r\n- NAT (NAT = Network Address Translation)\r\n- STUN SERVER ( STUN = Session Traversal of UDP Through NATs ) (also STUN = Session Traversal Utilities for NAT )\r\n- TURN SERVER ( TURN = Traversal Using Relay NAT )\r\n- ICE CANDIDATES (ICE = Interactive Connectivity Establishment)\r\n*/\r\n\r\n\r\n// TODO add dataChannel to send messages\r\n","import React from 'react';\r\nimport { HashRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport VideoSimplePeer from '../VideoSimplePeer/VideoSimplePeer';\r\nimport VideoPeerJS from '../VideoPeerJS/VideoPeerJS';\r\nimport VideoVanillaWebRTC from '../VideoVanillaWebRTC/VideoVanillaWebRTC';\r\n\r\nconst App = () => {\r\n    return (\r\n        <Router>\r\n            <Link to='/vanilla-webrtc'>Vanilla WebRTC Test</Link>\r\n            <Link to='/simplepeer'>Simple Peer Test</Link>\r\n            <Link to='/peerjs'>Peer JS Test</Link>\r\n\r\n            <Switch>\r\n                <Route path='/simplepeer' component={VideoSimplePeer} />\r\n                <Route path='/peerJS' component={VideoPeerJS} />\r\n                <Route path='/vanilla-webrtc' component={VideoVanillaWebRTC} />\r\n            </Switch>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}