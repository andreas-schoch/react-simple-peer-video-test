{"version":3,"sources":["components/VideoCallMockup/VideoCallMockup.module.scss","components/VideoCallMockup/VideoCallMockup.js","components/App/App.js","index.js"],"names":["module","exports","Video","video","useRef","remoteVideo","useState","peer","setPeer","stream","setStream","remoteStream","setRemoteStream","window","location","hash","initiator","username","connectData","message","inputState","setInputState","useEffect","current","srcObject","oncanplay","play","muted","console","log","on","err","error","data","type","JSON","stringify","parsedData","parse","author","text","remoteMediaStream","handleChange","e","target","name","value","className","styles","wrapper","left","ref","right","onClick","a","async","navigator","mediaDevices","getUserMedia","audio","mediaStream","startStream","Peer","trickle","onSubmit","preventDefault","signal","form","connectForm","join","id","onChange","placeholder","send","sendMessage","sendMessageForm","aria-label","App","VideoCallMockup","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.afa592ff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"VideoCallMockup_wrapper__NT1MO\",\"left\":\"VideoCallMockup_left__33sis\",\"video\":\"VideoCallMockup_video__24a2f\",\"right\":\"VideoCallMockup_right__3SrC3\",\"form\":\"VideoCallMockup_form__DP3CS\"};","import React, { useState, useEffect, useRef } from 'react';\r\nimport styles from './VideoCallMockup.module.scss';\r\nimport Peer from 'simple-peer';\r\n\r\nconst Video = () => {\r\n    //////////////////////\r\n    //// STATE & REFS ////\r\n    //////////////////////\r\n    const video = useRef(null);\r\n    const remoteVideo = useRef(null);\r\n\r\n    const [peer, setPeer] = useState(null);\r\n    const [stream, setStream] = useState(null);\r\n    const [remoteStream, setRemoteStream] = useState(null);\r\n    const [initiator] = useState(window.location.hash === '#init');\r\n    const [username] = useState(initiator ? 'PEER 1' : 'PEER 2');\r\n    const [messages] = useState([]);\r\n    const [inputState, setInputState] = useState({\r\n        connectData: '',\r\n        message: ''\r\n    });\r\n\r\n    /////////////////\r\n    //// EFFECTS ////\r\n    /////////////////\r\n    // set src of <video> to own stream when available\r\n    useEffect(() => {\r\n        if (video.current && stream) {\r\n            video.current.srcObject = stream;\r\n            video.current.oncanplay = () => {\r\n                video.current.play();\r\n                video.current.muted = true; // set to false to hear/test your own audio\r\n            };\r\n        }\r\n    }, [stream]);\r\n\r\n    // set src of <video> to remote stream when available\r\n    useEffect(() => {\r\n        if (remoteVideo.current && remoteStream) {\r\n            remoteVideo.current.srcObject = remoteStream;\r\n            remoteVideo.current.oncanplay = () => {\r\n                remoteVideo.current.play();\r\n                remoteVideo.current.muted = false; // set to false to hear/test remote audio\r\n            };\r\n        }\r\n    }, [remoteStream]);\r\n\r\n    useEffect(() => {\r\n        console.log('TESTPEER', peer);\r\n        if (peer) {\r\n            peer.on('error', err => console.error('error', err));\r\n\r\n            peer.on('signal', data => {\r\n                if (data.type === 'offer' || data.type === 'answer') {\r\n                    console.log(`%c ${JSON.stringify(data)}`, 'background: #222; color: #bada55');\r\n                }\r\n            });\r\n\r\n            peer.on('connect', () => {\r\n                console.log('CONNECT');\r\n            });\r\n\r\n            peer.on('data', data => {\r\n                const parsedData = JSON.parse(data);\r\n                console.log('parsed', parsedData);\r\n\r\n                if (parsedData.message) {\r\n                    console.log(\r\n                        `%c MESSAGE - ${parsedData.message.author}: \"${parsedData.message.text}\"`,\r\n                        'background: black; color: white; padding: 1rem'\r\n                    );\r\n                }\r\n            });\r\n\r\n            peer.on('stream', remoteMediaStream => {\r\n                setRemoteStream(remoteMediaStream);\r\n            });\r\n        }\r\n    }, [peer]);\r\n\r\n    /////////////////\r\n    //// METHODS ////\r\n    /////////////////\r\n    const initPeer = () => {\r\n        // trickle false prevents the lookout for \"candidates\" (I guess it scans your local network for devices it could connect to?)\r\n        setPeer(new Peer({ initiator: initiator, trickle: false, stream: stream }));\r\n    };\r\n\r\n    const startStream = async () => {\r\n        try {\r\n            let mediaStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n            setStream(mediaStream);\r\n        } catch (error) {\r\n            console.error('stream couldnt be started via \"startStream()\"', error);\r\n        }\r\n    };\r\n\r\n    const connect = () => {\r\n        peer.signal(JSON.parse(inputState.connectData));\r\n    };\r\n\r\n    const sendMessage = () => {\r\n        if (peer) {\r\n            const message = { author: username, text: inputState.message };\r\n            peer.send(JSON.stringify({ message }));\r\n        }\r\n    };\r\n\r\n    //////////////////\r\n    //// HANDLERS ////\r\n    //////////////////\r\n    const handleChange = e => setInputState({ ...inputState, [e.target.name]: e.target.value });\r\n    const handleStartStream = e => startStream();\r\n    const handleInitPeer = e => initPeer();\r\n\r\n    const handleSendMessage = e => {\r\n        e.preventDefault();\r\n\r\n        console.log('sending message');\r\n        sendMessage();\r\n    };\r\n\r\n    const handleConnect = e => {\r\n        e.preventDefault();\r\n        connect();\r\n    };\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.left}>\r\n                <h2>My Stream</h2>\r\n                {/* will play a livestream of your own webcam whenever available */}\r\n                <video ref={video} className={styles.video} />\r\n\r\n                <h2>Remote Stream</h2>\r\n                {/* will play a livestream of the remote webcam whenever call is ongoing and available */}\r\n                <video ref={remoteVideo} className={styles.video} />\r\n            </div>\r\n\r\n            <div className={styles.right}>\r\n                {/* click to start a livestream of your own webcam */}\r\n                <button onClick={handleStartStream}>Start My Stream</button>\r\n                <button onClick={handleInitPeer}>{`Init This Peer ${initiator ? '(Generates Offer)' : ''}`}</button>\r\n\r\n                <form onSubmit={handleConnect} className={[styles.form, styles.connectForm].join(' ')}>\r\n                    <fieldset>\r\n                        <legend>Connect</legend>\r\n                        <textarea\r\n                            name='connectData'\r\n                            id='connectData'\r\n                            onChange={handleChange}\r\n                            value={inputState.connectData}\r\n                            placeholder={`${initiator ? 'Enter Answer' : 'Enter Offer'} of other Peer`}\r\n                        />\r\n\r\n                        <button type='submit'>connect {!initiator ? '(Generates Answer)' : ''}</button>\r\n                    </fieldset>\r\n                </form>\r\n\r\n                <form onSubmit={handleSendMessage} className={[styles.form, styles.sendMessageForm].join(' ')}>\r\n                    <fieldset>\r\n                        <legend>Send Message to Peer</legend>\r\n                        <input\r\n                            type='text'\r\n                            aria-label='chat input'\r\n                            name='message'\r\n                            value={inputState.message}\r\n                            onChange={handleChange}\r\n                            placeholder='Hello Peer...'\r\n                        />\r\n                        <button type='submit'>send</button>\r\n                    </fieldset>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Video;\r\n","import React from 'react';\r\nimport VideoCallMockup from '../VideoCallMockup/VideoCallMockup';\r\n\r\nconst App = () => {\r\n    return <VideoCallMockup />;\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}