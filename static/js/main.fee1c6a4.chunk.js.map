{"version":3,"sources":["components/VideoSimplePeer/VideoSimplePeer.module.scss","../node_modules/peerjs/dist sync","components/VideoPeerJS/VideoPeerJS.module.scss","components/VideoSimplePeer/VideoSimplePeer.js","components/VideoPeerJS/VideoPeerJS.js","components/App/App.js","index.js"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","VideoSimplePeer","video","useRef","remoteVideo","useState","peer","setPeer","stream","setStream","remoteStream","setRemoteStream","window","location","hash","initiator","username","connectData","message","inputState","setInputState","useEffect","current","srcObject","oncanplay","play","muted","console","log","on","err","error","data","type","JSON","stringify","alert","parsedData","parse","author","text","remoteMediaStream","handleChange","target","name","value","className","styles","wrapper","left","ref","right","onClick","a","async","navigator","mediaDevices","getUserMedia","audio","mediaStream","startStream","Peer","trickle","onSubmit","preventDefault","signal","form","connectForm","join","onChange","placeholder","send","sendMessage","sendMessageForm","aria-label","VideoPeerJS","connection","setConnection","call","setCall","conn","remoteCall","answer","debug","config","iceServers","url","connect","destinationPeerId","App","to","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fee1c6a4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"VideoSimplePeer_wrapper__1ju8T\",\"left\":\"VideoSimplePeer_left__2umav\",\"video\":\"VideoSimplePeer_video__KtgIS\",\"right\":\"VideoSimplePeer_right__cd2lS\",\"form\":\"VideoSimplePeer_form__1qvQv\"};","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 79;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"VideoPeerJS_wrapper__37lXB\",\"left\":\"VideoPeerJS_left__37RIy\",\"video\":\"VideoPeerJS_video__1pBp_\",\"right\":\"VideoPeerJS_right__3ltnP\",\"form\":\"VideoPeerJS_form__1zsv2\"};","import React, { useState, useEffect, useRef } from 'react';\r\nimport styles from './VideoSimplePeer.module.scss';\r\nimport Peer from 'simple-peer';\r\n\r\nconst VideoSimplePeer = () => {\r\n    //////////////////////\r\n    //// STATE & REFS ////\r\n    //////////////////////\r\n    const video = useRef(null);\r\n    const remoteVideo = useRef(null);\r\n\r\n    const [peer, setPeer] = useState(null);\r\n    const [stream, setStream] = useState(null);\r\n    const [remoteStream, setRemoteStream] = useState(null);\r\n    const [initiator] = useState(window.location.hash === '#init');\r\n    const [username] = useState(initiator ? 'PEER 1' : 'PEER 2');\r\n    // const [messages] = useState([]);\r\n    const [inputState, setInputState] = useState({\r\n        connectData: '',\r\n        message: ''\r\n    });\r\n\r\n    /////////////////\r\n    //// EFFECTS ////\r\n    /////////////////\r\n    // set src of <video> to own stream when available\r\n    useEffect(() => {\r\n        if (video.current && stream) {\r\n            video.current.srcObject = stream;\r\n            video.current.oncanplay = () => {\r\n                video.current.play();\r\n                video.current.muted = true; // set to false to hear/test your own audio\r\n            };\r\n        }\r\n    }, [stream]);\r\n\r\n    // set src of <video> to remote stream when available\r\n    useEffect(() => {\r\n        if (remoteVideo.current && remoteStream) {\r\n            remoteVideo.current.srcObject = remoteStream;\r\n            remoteVideo.current.oncanplay = () => {\r\n                remoteVideo.current.play();\r\n                remoteVideo.current.muted = false; // set to false to hear/test remote audio\r\n            };\r\n        }\r\n    }, [remoteStream]);\r\n\r\n    useEffect(() => {\r\n        console.log('Peer', peer);\r\n        if (peer) {\r\n            peer.on('error', err => console.error('error', err));\r\n\r\n            peer.on('signal', data => {\r\n                if (data.type === 'offer' || data.type === 'answer') {\r\n                    console.log(`%c ${JSON.stringify(data)}`, 'background: #222; color: #bada55');\r\n                    alert(\r\n                        'open console and copy the console.log with the black background. Give it to the other peer to connect'\r\n                    );\r\n                }\r\n            });\r\n\r\n            peer.on('connect', () => {\r\n                console.log('CONNECT');\r\n            });\r\n\r\n            peer.on('data', data => {\r\n                const parsedData = JSON.parse(data);\r\n                console.log('parsed', parsedData);\r\n\r\n                if (parsedData.message) {\r\n                    console.log(\r\n                        `%c MESSAGE - ${parsedData.message.author}: \"${parsedData.message.text}\"`,\r\n                        'background: black; color: white; padding: 1rem'\r\n                    );\r\n                }\r\n            });\r\n\r\n            peer.on('stream', remoteMediaStream => {\r\n                setRemoteStream(remoteMediaStream);\r\n            });\r\n        }\r\n    }, [peer]);\r\n\r\n    /////////////////\r\n    //// METHODS ////\r\n    /////////////////\r\n    const initPeer = () => {\r\n        // trickle false prevents the lookout for \"ICE candidates\" (Candidates are best ways to connect to peers or something like that)\r\n        setPeer(new Peer({ initiator: initiator, trickle: false, stream: stream }));\r\n    };\r\n\r\n    const startStream = async () => {\r\n        try {\r\n            let mediaStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n            setStream(mediaStream);\r\n        } catch (error) {\r\n            console.error('stream couldnt be started via \"startStream()\"', error);\r\n        }\r\n    };\r\n\r\n    const connect = () => {\r\n        peer.signal(JSON.parse(inputState.connectData));\r\n    };\r\n\r\n    const sendMessage = () => {\r\n        if (peer) {\r\n            const message = { author: username, text: inputState.message };\r\n            peer.send(JSON.stringify({ message }));\r\n        }\r\n    };\r\n\r\n    //////////////////\r\n    //// HANDLERS ////\r\n    //////////////////\r\n    const handleChange = e => setInputState({ ...inputState, [e.target.name]: e.target.value });\r\n    const handleStartStream = e => startStream();\r\n    const handleInitPeer = e => initPeer();\r\n\r\n    const handleSendMessage = e => {\r\n        e.preventDefault();\r\n        console.log('sending message');\r\n        sendMessage();\r\n    };\r\n\r\n    const handleConnect = e => {\r\n        e.preventDefault();\r\n        connect();\r\n    };\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.left}>\r\n                <h2>My Stream</h2>\r\n                {/* will play a livestream of your own webcam whenever available */}\r\n                <video ref={video} className={styles.video} />\r\n\r\n                <h2>Remote Stream</h2>\r\n                {/* will play a livestream of the remote webcam whenever connection is established stream and available */}\r\n                <video ref={remoteVideo} className={styles.video} />\r\n            </div>\r\n\r\n            <div className={styles.right}>\r\n                {/* click to start a livestream of your own webcam */}\r\n                <button onClick={handleStartStream}>Start My Stream</button>\r\n\r\n                {/* click to initialize this user as a peer */}\r\n                <button onClick={handleInitPeer}>{`Init This Peer ${initiator ? '(Generates Offer)' : ''}`}</button>\r\n\r\n                <form onSubmit={handleConnect} className={[styles.form, styles.connectForm].join(' ')}>\r\n                    <fieldset>\r\n                        <legend>Connect</legend>\r\n                        <textarea\r\n                            name='connectData'\r\n                            id='connectData'\r\n                            onChange={handleChange}\r\n                            value={inputState.connectData}\r\n                            placeholder={`${initiator ? 'Enter Answer' : 'Enter Offer'} of other Peer`}\r\n                        />\r\n\r\n                        <button type='submit'>connect {!initiator ? '(Generates Answer)' : ''}</button>\r\n                    </fieldset>\r\n                </form>\r\n\r\n                <form onSubmit={handleSendMessage} className={[styles.form, styles.sendMessageForm].join(' ')}>\r\n                    <fieldset>\r\n                        <legend>Send Message to Peer</legend>\r\n                        <input\r\n                            type='text'\r\n                            aria-label='chat input'\r\n                            name='message'\r\n                            value={inputState.message}\r\n                            onChange={handleChange}\r\n                            placeholder='Hello Peer...'\r\n                        />\r\n                        <button type='submit'>send</button>\r\n                    </fieldset>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VideoSimplePeer;\r\n\r\n/*\r\nTHINGS TO LEARN ABOUT\r\n- NAT (NAT = Network Address Translation)\r\n- STUN SERVER ( STUN = Session Traversal of UDP Through NATs ) (also STUN = Session Traversal Utilities for NAT ) \r\n- TURN SERVER ( TURN = Traversal Using Relay NAT )\r\n- SIGNALING\r\n- ICE CANDIDATES (ICE = Interactive Connectivity Establishment)\r\n- \r\n\r\n\r\n\r\n*/\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport styles from './VideoPeerJS.module.scss';\r\nimport Peer from 'peerjs';\r\n\r\nconst VideoPeerJS = () => {\r\n    //////////////////////\r\n    //// STATE & REFS ////\r\n    //////////////////////\r\n    const video = useRef(null);\r\n    const remoteVideo = useRef(null);\r\n\r\n    const [peer, setPeer] = useState(null);\r\n    const [connection, setConnection] = useState(null);\r\n    const [call, setCall] = useState(null);\r\n\r\n    const [stream, setStream] = useState(null);\r\n    const [remoteStream, setRemoteStream] = useState(null);\r\n    // const [initiator] = useState(window.location.hash === '#init');\r\n    // const [username] = useState(initiator ? 'PEER 1' : 'PEER 2');\r\n    // const [messages] = useState([]);\r\n    const [inputState, setInputState] = useState({\r\n        connectData: '',\r\n        message: ''\r\n    });\r\n\r\n    /////////////////\r\n    //// EFFECTS ////\r\n    /////////////////\r\n    // set src of <video> to own stream when available\r\n    useEffect(() => {\r\n        if (video.current && stream) {\r\n            video.current.srcObject = stream;\r\n            video.current.oncanplay = () => {\r\n                video.current.play();\r\n                video.current.muted = true; // set to false to hear/test your own audio\r\n            };\r\n        }\r\n    }, [stream]);\r\n\r\n    // set src of <video> to remote stream when available\r\n    useEffect(() => {\r\n        if (remoteVideo.current && remoteStream) {\r\n            remoteVideo.current.srcObject = remoteStream;\r\n            remoteVideo.current.oncanplay = () => {\r\n                remoteVideo.current.play();\r\n                remoteVideo.current.muted = false; // set to false to hear/test remote audio\r\n            };\r\n        }\r\n    }, [remoteStream]);\r\n\r\n    // init event listeners for peer when peer is available\r\n    useEffect(() => {\r\n        if (peer) {\r\n            peer.on('open', id => {\r\n                console.log('My peer ID is: ' + id);\r\n                console.log('PEERr', peer);\r\n                alert('my peer id: ' + id);\r\n            });\r\n\r\n            peer.on('connection', conn => {\r\n                console.log('connection', conn);\r\n                setConnection(conn);\r\n            });\r\n\r\n            peer.on('call', remoteCall => {\r\n                // Answer the call, providing our mediaStream\r\n                console.log('incoming call. Answering automatically');\r\n                setCall(remoteCall);\r\n                remoteCall.answer(stream);\r\n                // setRemoteStream(call);\r\n            });\r\n        }\r\n    }, [peer]);\r\n\r\n    // init event listeners for connection when connection is established\r\n    useEffect(() => {\r\n        if (connection) {\r\n            console.log('CONNECTION ESTABLISHED');\r\n\r\n            connection.on('open', () => {\r\n                connection.on('data', data => {\r\n                    const parsedData = JSON.parse(data);\r\n                    console.log('parsed', parsedData);\r\n\r\n                    if (parsedData.message) {\r\n                        console.log(\r\n                            `%c MESSAGE - ${parsedData.message.author}: \"${parsedData.message.text}\"`,\r\n                            'background: black; color: white; padding: 1rem'\r\n                        );\r\n                        alert('incomming message: ' + parsedData.message.text);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }, [connection]);\r\n\r\n    useEffect(() => {\r\n        if (call) {\r\n            call.on('stream', remoteMediaStream => {\r\n                setRemoteStream(remoteMediaStream);\r\n            });\r\n        }\r\n    }, [call]);\r\n\r\n    /////////////////\r\n    //// METHODS ////\r\n    /////////////////\r\n    const initPeer = () => {\r\n        setPeer(new Peer({ debug: true, config: { iceServers: [{ url: 'stun:stun.l.google.com:19302' }] } }));\r\n    };\r\n\r\n    const startStream = async () => {\r\n        try {\r\n            let mediaStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n            setStream(mediaStream);\r\n        } catch (error) {\r\n            console.error('stream couldnt be started via \"startStream()\"', error);\r\n        }\r\n    };\r\n\r\n    const connect = () => {\r\n        setConnection(peer.connect(inputState.connectData));\r\n    };\r\n\r\n    const sendMessage = () => {\r\n        if (peer && connection) {\r\n            const message = { author: 'derp', text: inputState.message };\r\n            connection.send(JSON.stringify({ message }));\r\n            console.log('sending message');\r\n            // connection.send('Hello!');\r\n        }\r\n    };\r\n\r\n    const startCall = destinationPeerId => {\r\n        if (peer && connection && stream) {\r\n            setCall(peer.call(destinationPeerId, stream));\r\n        }\r\n    };\r\n\r\n    //////////////////\r\n    //// HANDLERS ////\r\n    //////////////////\r\n    const handleChange = e => setInputState({ ...inputState, [e.target.name]: e.target.value });\r\n    const handleStartStream = e => startStream();\r\n    const handleInitPeer = e => initPeer();\r\n\r\n    const handleSendMessage = e => {\r\n        e.preventDefault();\r\n        // console.log('sending message');\r\n        sendMessage();\r\n    };\r\n\r\n    const handleConnect = e => {\r\n        e.preventDefault();\r\n        connect();\r\n    };\r\n\r\n    const handleStartCall = e => {\r\n        startCall(inputState.connectData);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.left}>\r\n                <h2>My Stream</h2>\r\n                {/* will play a livestream of your own webcam whenever available */}\r\n                <video ref={video} className={styles.video} />\r\n\r\n                <h2>Remote Stream</h2>\r\n                {/* will play a livestream of the remote webcam whenever connection is established stream and available */}\r\n                <video ref={remoteVideo} className={styles.video} />\r\n            </div>\r\n\r\n            <div className={styles.right}>\r\n                {/* click to start a livestream of your own webcam */}\r\n                <button onClick={handleStartStream}>Start My Stream</button>\r\n\r\n                {/* click to initialize this user as a peer */}\r\n                <button onClick={handleInitPeer}>Init This Peer</button>\r\n\r\n                <form onSubmit={handleConnect} className={styles.form}>\r\n                    <fieldset>\r\n                        <legend>Connect</legend>\r\n                        <input\r\n                            type='text'\r\n                            name='connectData'\r\n                            id='connectData'\r\n                            onChange={handleChange}\r\n                            value={inputState.connectData}\r\n                            placeholder='enter peer id you want to connect with'\r\n                        />\r\n\r\n                        <button type='submit'>connect</button>\r\n                    </fieldset>\r\n                </form>\r\n\r\n                <form onSubmit={handleSendMessage} className={styles.form}>\r\n                    <fieldset>\r\n                        <legend>Send Message to Peer</legend>\r\n                        <input\r\n                            type='text'\r\n                            aria-label='chat input'\r\n                            name='message'\r\n                            value={inputState.message}\r\n                            onChange={handleChange}\r\n                            placeholder='Hello Peer...'\r\n                        />\r\n                        <button type='submit'>send</button>\r\n                    </fieldset>\r\n                </form>\r\n\r\n                {/* click to start call */}\r\n                <button onClick={handleStartCall}>CALL</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VideoPeerJS;\r\n\r\n/*\r\nTHINGS TO LEARN ABOUT\r\n- NAT (NAT = Network Address Translation)\r\n- STUN SERVER ( STUN = Session Traversal of UDP Through NATs ) (also STUN = Session Traversal Utilities for NAT ) \r\n- TURN SERVER ( TURN = Traversal Using Relay NAT )\r\n- SIGNALING\r\n- ICE CANDIDATES (ICE = Interactive Connectivity Establishment)\r\n- \r\n\r\n\r\n\r\n*/\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport VideoSimplePeer from '../VideoSimplePeer/VideoSimplePeer';\r\nimport VideoPeerJS from '../VideoPeerJS/VideoPeerJS';\r\n\r\nconst App = () => {\r\n    return (\r\n        <Router>\r\n            <Link to='/simplepeer'>Simple Peer Test</Link>\r\n            <Link to='/peerjs'>Peer JS Test</Link>\r\n\r\n            <Switch>\r\n                <Route path='/simplepeer' component={VideoSimplePeer} />\r\n                <Route path='/peerJS' component={VideoPeerJS} />\r\n            </Switch>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}